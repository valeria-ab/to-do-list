{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","TodoList","newValue","changeTodoListTitle","id","removeTodoList","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","changeFilter","filter","App","todoList1","v1","todoList2","setTasks","todoLists","setTodoLists","todoListID","task","newTask","find","changedTodoList","tl","taskID","newTitle","todolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoList","spacing","allTodolistTasks","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.16acf5b0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState('')\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError('')\n        setTitle(e.currentTarget.value)\n    };\n    const addItem = () => {\n        if (title.trim() === '') {\n            setError('Название не может быть пустым')\n            return\n        }\n        props.addItem(title.trim());\n        setTitle('')\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13) {\n            addItem()\n        }\n    };\n\n\n    return (\n        <div>\n            <TextField\n                variant={\"outlined\"}\n                label={'Введите название задачи'}\n                value={title}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton\n                color={'primary'}\n                onClick={addItem}\n            >\n                <AddBox />\n            </IconButton>\n        {/*    {error && <div className={'error-message'}>{error}</div>}*/}\n        </div>)\n}","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\nonChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n    const  [editMode, setEditMode] = useState(false)\n    const  [title, setTitle] = useState(props.title)\n\n    const activateEditMode = () => { setEditMode(true) }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {setTitle(e.currentTarget.value) }\n\n    return editMode\n                ? <TextField variant={\"standard\"} value={title} onBlur={activateViewMode} autoFocus onChange={onChangeTitleHandler}/>\n                :<span onDoubleClick={activateEditMode}>{title}</span>\n\n}","import React from 'react';\nimport {FilterValuesType} from './App';\nimport {AddItemForm} from './AddItemForm';\nimport {EditableSpan} from './EditableSpan';\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\nimport {CheckBox, Delete} from \"@material-ui/icons\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskPropsType>\n    addTask: (title: string, todoListID: string) => void\n    removeTask: (id: string, todoListID: string) => void\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\n    filter: FilterValuesType\n    removeTodoList: (todoListID: string) => void\n}\n\nexport type TaskPropsType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport function TodoList(props: TodoListPropsType) {\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const onAllClickHandler = () => {\n        props.changeFilter('all', props.id)\n    }\n    const onActiveClickHandler = () => {\n        props.changeFilter('active', props.id)\n    }\n    const onCompletedClickHandler = () => {\n        props.changeFilter('completed', props.id)\n    }\n\n\n    return (\n        <div>\n            <h3><EditableSpan title={props.title} onChange={\n                (newValue) => {\n                    props.changeTodoListTitle(newValue, props.id)\n                }\n            }/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm\n                addItem={addTask}\n            />\n\n            <div>\n                {\n                    props.tasks.map(t => <div key={t.id} className={t.isDone ? 'is-done' : ''}>\n                        <Checkbox\n                            color={'primary'}\n                            checked={t.isDone}\n                            onChange={(e) =>\n                                props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)}\n                        />\n                        <EditableSpan title={t.title} onChange={\n                            (newValue) => props.changeTaskTitle(t.id, newValue, props.id)\n                        }/>\n                        <IconButton onClick={() => props.removeTask(t.id, props.id)}>\n                            <Delete/>\n                        </IconButton>\n                    </div>)\n                }\n\n            </div>\n            <div>\n                <Button\n                    onClick={onAllClickHandler}\n                    variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    color={'default'}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        variant={props.filter === 'active' ? 'outlined' : 'text'}\n                        color={'primary'}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                        color={'secondary'}\n                >Completed</Button>\n            </div>\n        </div>\n    )\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskPropsType, TodoList} from './TodoList';\nimport {v1} from 'uuid';\nimport {AddItemForm} from './AddItemForm';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\ntype TasksStateType = {\n    // объект может иметь свойства-ключи, которые строковые\n    // (а ключи вообще в объекте и не могут быть иными),\n    // а вот значения этих св-в это массив объектов TaskPropsType\n    [key: string]: Array<TaskPropsType>\n}\n\nfunction App() {\n    /*   let [tasks, setTasks] = useState([\n           {id: v1(), title: 'HTML&CSS', isDone: true},\n           {id: v1(), title: 'JS', isDone: true},\n           {id: v1(), title: 'React', isDone: false},\n           {id: v1(), title: 'RestAPI', isDone: false}\n       ])*/\n    let todoList1 = v1()\n    let todoList2 = v1()\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoList1]: [\n            {id: v1(), title: 'HTML&CSS', isDone: true},\n            {id: v1(), title: 'JS', isDone: true},\n            {id: v1(), title: 'React', isDone: false},\n            {id: v1(), title: 'RestAPI', isDone: false}\n        ],\n        [todoList2]: [\n            {id: v1(), title: 'milk', isDone: false},\n            {id: v1(), title: 'cheese', isDone: false},\n        ]\n    })\n\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        {id: todoList1, title: 'What to learn', filter: 'all'},\n        {id: todoList2, title: 'What to buy', filter: 'all'}\n    ])\n\n    function removeTask(id: string, todoListID: string) {\n        tasks[todoListID] = tasks[todoListID].filter(task => id !== task.id)\n        setTasks({...tasks})\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let newTask = {id: v1(), title: title, isDone: false}\n        tasks[todoListID] = [newTask, ...tasks[todoListID]]\n        setTasks({...tasks})\n    }\n\n    function changeTaskStatus(id: string, isDone: boolean, todoListID: string) {\n        let task = tasks[todoListID].find(t => t.id === id)\n\n        if (task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n    }\n\n    function changeFilter(value: FilterValuesType, todoListID: string) {\n        let changedTodoList = todoLists.find(tl => tl.id === todoListID);\n        if (changedTodoList) {\n            changedTodoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function removeTodoList(todoListID: string) {\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\n        delete tasks[todoListID]\n        setTasks({...tasks})\n    }\n\n    function addTodoList(title: string) {\n        let newTodoList: TodoListType = {id: v1(), title: title, filter: 'all'}\n        setTodoLists([newTodoList, ...todoLists])\n        setTasks({...tasks, [newTodoList.id]: []})\n    }\n\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\n        let task = tasks[todoListID].find(t => t.id === taskID)\n\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\n        let todolist = todoLists.find(t => t.id === todoListID)\n\n        if (todolist) {\n            todolist.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm\n                        addItem={addTodoList}\n                    />\n                </Grid>\n\n                <Grid container spacing={10}>\n                    {\n                        todoLists.map(tl => {\n                                let allTodolistTasks = tasks[tl.id]\n                                let tasksForTodoList = allTodolistTasks;\n\n                                if (tl.filter === 'active') {\n                                    tasksForTodoList = allTodolistTasks.filter(task => task.isDone === false)\n                                }\n                                if (tl.filter === 'completed') {\n                                    tasksForTodoList = allTodolistTasks.filter(task => task.isDone === true)\n                                }\n                                return (\n                                    <Grid item>\n                                        <Paper style={{padding: '10px'}}>\n                                            <TodoList\n                                                key={tl.id}\n                                                id={tl.id}\n                                                title={tl.title}\n                                                tasks={tasksForTodoList}\n                                                addTask={addTask}\n                                                removeTask={removeTask}\n                                                changeFilter={changeFilter}\n                                                changeTaskStatus={changeTaskStatus}\n                                                changeTaskTitle={changeTaskTitle}\n                                                changeTodoListTitle={changeTodoListTitle}\n                                                removeTodoList={removeTodoList}\n                                                filter={tl.filter}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                )\n                            }\n                        )\n                    }\n                        </Grid>\n\n                        </Container>\n                        </div>\n                        );\n                    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}